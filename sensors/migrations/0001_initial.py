# Generated by Django 3.0.4 on 2020-03-11 03:59

import django.core.validators
from django.db import migrations, models
import multiselectfield.db.fields
import phone_field.models
import sensors.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DeviceID', models.IntegerField(unique=True)),
                ('IP', models.GenericIPAddressField(default='0.0.0.0', protocol='IPv4')),
                ('Port', models.IntegerField(default=23000)),
                ('MacAddress', models.CharField(default='aa:bb:cc:dd:ee:ff', max_length=20, validators=[sensors.validators.validate_MAC])),
                ('AdministrativeRegion', models.CharField(choices=[('gangwon-do', 'Gangwon-do'), ('gyeonggi-do', 'Gyeongii-do')], max_length=100)),
                ('InstallationRoute', models.CharField(choices=[('a', 'A'), ('b', 'B')], max_length=100)),
                ('InstallationLocation', models.CharField(max_length=100)),
                ('Long', models.DecimalField(decimal_places=3, max_digits=8, null=True)),
                ('Lat', models.DecimalField(decimal_places=3, max_digits=8, null=True)),
                ('InterlockDeviceID1', models.CharField(default='None', max_length=100)),
                ('InterlockDeviceID2', models.CharField(default='None', max_length=100)),
                ('InterlockDeviceID3', models.CharField(default='None', max_length=100)),
                ('InterlockDeviceID4', models.CharField(default='None', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='HistorySettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Item_List', multiselectfield.db.fields.MultiSelectField(choices=[('Air_Temp', 'Air_Temp'), ('Ground_Temp', 'Ground_Temp'), ('Humidity', 'Humidity'), ('Atmospheric_Pressure', 'Atmospheric_Pressure'), ('Accumulated_Precipitation', 'Accumulated_Precipitation'), ('Dust_Concentration', 'Dust_Concentration'), ('Radiation_Illumination', 'Radiation_Illumination'), ('Solar_Radiation', 'Solar_Radiation'), ('Noise_Level', 'Noise_Level'), ('Earthquakes', 'Earthquakes'), ('Accelerometer_X:Y:Z', 'Accelerometer_X:Y:Z'), ('GPS_coordinates', 'GPS_coordinates'), ('Measurement_time', 'Measurement_time')], max_length=211)),
                ('Graph_Setting', multiselectfield.db.fields.MultiSelectField(choices=[('Line_graph', 'Line_graph'), ('Bar_graph', 'Bar_graph'), ('Scatter_graph', 'Scatter_graph')], max_length=34)),
                ('Save', models.CharField(choices=[('6_months', '6_months'), ('1_year', '1_year')], max_length=100)),
                ('Delete', models.CharField(choices=[('6_months', '6_months'), ('1_year', '1_year')], max_length=100)),
                ('Cycle_time', models.CharField(choices=[('6_months', '6_months'), ('1_year', '1_year')], max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='InterlockDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Device_ID', models.IntegerField(unique=True)),
                ('IP', models.GenericIPAddressField(default='0.0.0.0', protocol='IPv4')),
                ('Port', models.IntegerField(default=23000)),
                ('Device_Type', models.CharField(choices=[('Device of Sprinkler', 'Device of Sprinkler'), ('CCTV', 'CCTV'), ('Electronic Board', 'Electronic Board'), ('Disaster Broadcast', 'Disaster Broadcast')], max_length=100)),
                ('Remarks', models.CharField(default='None', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PhoneNo', models.IntegerField()),
                ('Password', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(10)])),
                ('confirmPassword', models.CharField(max_length=100)),
                ('MacAddress', models.CharField(default='aa:bb:cc:dd:ee:ff', max_length=20, validators=[sensors.validators.validate_MAC])),
                ('ManagerName', models.CharField(max_length=100)),
                ('ManagerPhoneNo', phone_field.models.PhoneField(blank=True, max_length=31)),
                ('Department', models.CharField(max_length=100)),
                ('FinalApprover', models.CharField(max_length=100, verbose_name='Final Approver')),
            ],
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Did', models.IntegerField()),
                ('MAC_Address', models.CharField(max_length=8)),
                ('Date', models.DateField()),
                ('Time', models.TimeField()),
                ('WeekDay', models.IntegerField()),
                ('Air_Temperature', models.FloatField()),
                ('Humidity', models.FloatField()),
                ('Air_Pressure', models.FloatField()),
                ('Accumulated_PPT', models.FloatField()),
                ('Dust_Concentration', models.FloatField()),
                ('Radiation_Illuminance', models.FloatField()),
                ('Solar_Radiation', models.FloatField()),
                ('RoadSurface_Temperature', models.FloatField()),
                ('Noise_Level', models.IntegerField()),
                ('Accelerometer_Xout', models.FloatField()),
                ('Accelerometer_Yout', models.FloatField()),
                ('Accelerometer_Zout', models.FloatField()),
                ('GPS_Location_N', models.FloatField()),
                ('GPS_Location_E', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='SettingsWindow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Select_Esensor_item', multiselectfield.db.fields.MultiSelectField(choices=[('Administrative_District', 'Administrative_District'), ('Route_Name', 'Route_Name'), ('Installation_Location', 'Installation_Location'), ('Air_Temp', 'Air_Temp'), ('Ground_Temp', 'Ground_Temp'), ('Humidity', 'Humidity'), ('Atmospheric_Pressure', 'Atmospheric_Pressure'), ('Accumulated_Precipitation', 'Accumulated_Precipitation'), ('Dust_Concentration', 'Dust_Concentration'), ('Radiation_Illumination', 'Radiation_Illumination'), ('Solar_Radiation', 'Solar_Radiation'), ('Noise_level', 'Noise_level'), ('Earthquakes', 'Earthquakes'), ('Accelerometer_X:Y:Z', 'Accelerometer_X:Y:Z'), ('GPS_coordinates', 'GPS_coordinates'), ('Measuremeent_time', 'Measurement_time')], max_length=269)),
            ],
        ),
    ]
